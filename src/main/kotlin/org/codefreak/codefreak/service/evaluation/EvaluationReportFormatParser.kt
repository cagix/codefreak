package org.codefreak.codefreak.service.evaluation

import java.io.InputStream
import org.codefreak.codefreak.entity.EvaluationStepResult
import org.codefreak.codefreak.entity.EvaluationStepStatus
import org.codefreak.codefreak.entity.Feedback

/**
 * Parsers can convert arbitrary formats into Code FREAK Feedback
 */
interface EvaluationReportFormatParser {
  val id: String
  val title: String

  /**
   * This method will be called in case no matching files to parse have been found.
   * This could either be good or bad: E.g. in case no jUnit test reports have been found when using Java
   * this means compilation failed. In this cases the stdout gives more information about what went wrong.
   * But this
   */
  fun handleNoFilesFound(exitCode: Int, output: String, matchingPattern: String): List<Feedback> {
    if (exitCode > 0) {
      throw EvaluationStepException(
          "Process exited with $exitCode:\n$output",
          EvaluationStepResult.FAILED,
          EvaluationStepStatus.FINISHED
      )
    } else {
      throw EvaluationStepException(
          "Process exited with $exitCode:\n$output",
          EvaluationStepResult.SUCCESS,
          EvaluationStepStatus.FINISHED
      )
    }
  }

  /**
   * Parse the given file content InputStream into a list of Feedback.
   * The exit code and console output may give additional hints to the parser how to interpret the result.
   * The implementation should NOT close the underlying input stream!
   */
  fun parse(exitCode: Int, stdout: String, fileContent: InputStream): List<Feedback>
  fun parse(exitCode: Int, stdout: String, fileContent: String): List<Feedback> = parse(
      exitCode,
      stdout,
      fileContent.byteInputStream()
  )

  /**
   * Summarize a list of feedback that has been generated by this report parser.
   * The resulting string should give a quick overview about the feedback e.g. a number of failed unit tests
   * or a summary of format violations.
   */
  fun summarize(feedbackList: List<Feedback>): String
}
